openapi: 3.1.0
info:
  title: LayoutKit API
  version: 0.1.0
  description: |
    Spec‑first 2D page layout and rendering API.
    Inputs are in points (pt, y‑up). The result is a deterministic Scene (display list).
servers:
  - url: /
paths:
  /health:
    get:
      tags: [System]
      operationId: getHealth
      summary: Health check
      description: Returns 200 if the service is healthy.
      responses:
        '200': { description: OK }
  /version:
    get:
      tags: [System]
      operationId: getVersion
      summary: Version info
      description: Returns API and scene schema version identifiers.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  api: { type: string, description: API version string }
                  scene: { type: string, description: Scene schema version string }
                required: [api, scene]
  /layout/page:
    post:
      tags: [Layout]
      operationId: layoutPage
      summary: Layout a page into a Scene
      description: Computes a deterministic Scene (display list) for a page.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageSpec'
            examples:
              a4:
                value:
                  widthPt: 595
                  heightPt: 842
                  margins: { top: 48, left: 36, right: 36, bottom: 48 }
      responses:
        '200':
          description: Scene result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scene'
        '400':
          description: Invalid input
          content:
            application/problem+json:
              schema: { $ref: '#/components/schemas/Problem' }
        '500':
          description: Internal error
          content:
            application/problem+json:
              schema: { $ref: '#/components/schemas/Problem' }
components:
  schemas:
    Problem:
      type: object
      description: RFC 7807 Problem Details
      additionalProperties: false
      properties:
        type: { type: string, format: uri }
        title: { type: string }
        status: { type: integer }
        detail: { type: string }
        instance: { type: string, format: uri }
        code: { type: string }
      required: [title, status]

    PageSpec:
      type: object
      additionalProperties: false
      description: Page specification in points (pt), y‑up.
      properties:
        widthPt: { type: number, minimum: 1, description: Page width in pt }
        heightPt: { type: number, minimum: 1, description: Page height in pt }
        margins:
          $ref: '#/components/schemas/Insets'
        units: { type: string, enum: [pt], default: pt }
        yUp: { type: boolean, default: true }
      required: [widthPt, heightPt]

    Insets:
      type: object
      additionalProperties: false
      properties:
        top: { type: number, minimum: 0 }
        left: { type: number, minimum: 0 }
        right: { type: number, minimum: 0 }
        bottom: { type: number, minimum: 0 }
      required: [top, left, right, bottom]

    Scene:
      type: object
      additionalProperties: false
      description: Deterministic display list in page coordinates (pt, y‑up).
      properties:
        page: { $ref: '#/components/schemas/PageSpec' }
        units: { type: string, enum: [pt], default: pt }
        yUp: { type: boolean, default: true }
        version: { type: string, enum: [scene-v1], default: scene-v1 }
        bounds:
          type: object
          additionalProperties: false
          properties: { x: { type: number }, y: { type: number }, width: { type: number }, height: { type: number } }
        snapHints:
          type: object
          additionalProperties: false
          properties:
            snapX: { type: boolean, default: false }
            snapY: { type: boolean, default: true }
        resources: { $ref: '#/components/schemas/Resources' }
        commands:
          type: array
          items: { $ref: '#/components/schemas/Command' }
      required: [page, commands, units, yUp, version]

    Resources:
      type: object
      additionalProperties: false
      properties:
        fonts:
          type: array
          items: { $ref: '#/components/schemas/FontResource' }
        images:
          type: array
          items: { $ref: '#/components/schemas/ImageResource' }

    FontResource:
      type: object
      additionalProperties: false
      properties:
        id: { type: string }
        family: { type: string }
        postscriptName: { type: string }
        smufl: { type: boolean, default: false }
        url: { type: string, format: uri }
        hash: { type: string }
      required: [id, family]

    ImageResource:
      type: object
      additionalProperties: false
      properties:
        id: { type: string }
        url: { type: string, format: uri }
        width: { type: number }
        height: { type: number }
        hash: { type: string }
      required: [id, url]

    Command:
      oneOf:
        - $ref: '#/components/schemas/CmdSave'
        - $ref: '#/components/schemas/CmdRestore'
        - $ref: '#/components/schemas/CmdTransform'
        - $ref: '#/components/schemas/CmdPath'
        - $ref: '#/components/schemas/CmdText'
      discriminator:
        propertyName: op
        mapping:
          save: '#/components/schemas/CmdSave'
          restore: '#/components/schemas/CmdRestore'
          transform: '#/components/schemas/CmdTransform'
          path: '#/components/schemas/CmdPath'
          text: '#/components/schemas/CmdText'

    CmdSave:
      type: object
      additionalProperties: false
      properties:
        op: { type: string, enum: [save] }
        id: { type: string, description: Optional stable id for grouping }
      required: [op]

    CmdRestore:
      type: object
      additionalProperties: false
      properties:
        op: { type: string, enum: [restore] }
      required: [op]

    CmdTransform:
      type: object
      additionalProperties: false
      properties:
        op: { type: string, enum: [transform] }
        a: { type: number }
        b: { type: number }
        c: { type: number }
        d: { type: number }
        e: { type: number }
        f: { type: number }
      required: [op, a, b, c, d, e, f]

    CmdPath:
      type: object
      additionalProperties: false
      properties:
        op: { type: string, enum: [path] }
        path: { $ref: '#/components/schemas/Path' }
        style: { $ref: '#/components/schemas/Style' }
      required: [op, path, style]

    Path:
      type: object
      additionalProperties: false
      properties:
        segments:
          type: array
          items: { $ref: '#/components/schemas/PathSegment' }
      required: [segments]

    PathSegment:
      oneOf:
        - $ref: '#/components/schemas/MoveTo'
        - $ref: '#/components/schemas/LineTo'
        - $ref: '#/components/schemas/QuadTo'
        - $ref: '#/components/schemas/CubicTo'
        - $ref: '#/components/schemas/ArcTo'
        - $ref: '#/components/schemas/ClosePath'
      discriminator:
        propertyName: op
        mapping:
          moveTo: '#/components/schemas/MoveTo'
          lineTo: '#/components/schemas/LineTo'
          quadTo: '#/components/schemas/QuadTo'
          cubicTo: '#/components/schemas/CubicTo'
          arcTo: '#/components/schemas/ArcTo'
          closePath: '#/components/schemas/ClosePath'

    MoveTo: { type: object, additionalProperties: false, required: [op,x,y], properties: { op: { type: string, enum: [moveTo] }, x: { type: number }, y: { type: number } } }
    LineTo: { type: object, additionalProperties: false, required: [op,x,y], properties: { op: { type: string, enum: [lineTo] }, x: { type: number }, y: { type: number } } }
    QuadTo: { type: object, additionalProperties: false, required: [op,cx,cy,x,y], properties: { op: { type: string, enum: [quadTo] }, cx: { type: number }, cy: { type: number }, x: { type: number }, y: { type: number } } }
    CubicTo: { type: object, additionalProperties: false, required: [op,c1x,c1y,c2x,c2y,x,y], properties: { op: { type: string, enum: [cubicTo] }, c1x: { type: number }, c1y: { type: number }, c2x: { type: number }, c2y: { type: number }, x: { type: number }, y: { type: number } } }
    ArcTo:
      type: object
      additionalProperties: false
      required: [op, rx, ry, xAxisRotation, largeArc, sweep, x, y]
      properties:
        op: { type: string, enum: [arcTo] }
        rx: { type: number }
        ry: { type: number }
        xAxisRotation: { type: number }
        largeArc: { type: boolean }
        sweep: { type: boolean }
        x: { type: number }
        y: { type: number }
    ClosePath: { type: object, additionalProperties: false, required: [op], properties: { op: { type: string, enum: [closePath] } } }

    Style:
      type: object
      additionalProperties: false
      properties:
        stroke: { $ref: '#/components/schemas/Color' }
        fill: { $ref: '#/components/schemas/Color' }
        strokeOpacity: { type: number, minimum: 0, maximum: 1, default: 1 }
        fillOpacity: { type: number, minimum: 0, maximum: 1, default: 1 }
        lineWidth: { type: number, minimum: 0, default: 1 }
        lineCap: { type: string, enum: [butt, round, square], default: butt }
        lineJoin: { type: string, enum: [miter, round, bevel], default: miter }
        miterLimit: { type: number, minimum: 1, default: 4 }
        lineDash:
          type: array
          items: { type: number, minimum: 0 }
        dashOffset: { type: number, default: 0 }
        fillRule: { type: string, enum: [nonzero, evenodd], default: nonzero }
        blendMode:
          type: string
          enum: [normal, multiply, screen, overlay, darken, lighten]
          default: normal

    Color:
      oneOf:
        - type: string
          description: CSS color string (#RRGGBB, rgb(), etc.)
        - type: object
          additionalProperties: false
          required: [r,g,b,a]
          properties:
            r: { type: number, minimum: 0, maximum: 1 }
            g: { type: number, minimum: 0, maximum: 1 }
            b: { type: number, minimum: 0, maximum: 1 }
            a: { type: number, minimum: 0, maximum: 1 }

    CmdText:
      type: object
      additionalProperties: false
      properties:
        op: { type: string, enum: [text] }
        run: { $ref: '#/components/schemas/TextRun' }
      required: [op, run]

    TextRun:
      type: object
      additionalProperties: false
      properties:
        x: { type: number, default: 0 }
        y: { type: number, default: 0 }
        fontRef: { type: string, description: Font resource id; fallback to fontFamily }
        fontFamily: { type: string }
        fontSizePt: { type: number, minimum: 0 }
        glyphSet: { type: string, enum: [unicode, smufl], default: unicode }
        baseline: { type: string, enum: [alphabetic, middle, hanging, ideographic], default: alphabetic }
        dir: { type: string, enum: [ltr, rtl, ttb], default: ltr }
        lang: { type: string, description: BCP‑47 language tag }
        script: { type: string }
        glyphs:
          type: array
          items:
            type: object
            additionalProperties: false
            required: [codePoint]
            properties:
              codePoint: { type: integer }
              dx: { type: number, default: 0 }
              dy: { type: number, default: 0 }
              advance: { type: number }
      required: [fontSizePt, glyphs]
